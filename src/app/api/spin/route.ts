/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { encrypt } from "@/lib/crypto";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
import nodemailer from "nodemailer";

dayjs.extend(utc);
dayjs.extend(timezone);

// ===============================
// ‚öôÔ∏è G·ª¨I MAIL C·∫¢NH B√ÅO H·∫æT QU√Ä
// ===============================
async function sendLowStockMail(prizeName: string, quantity: number) {
  try {
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: Number(process.env.SMTP_PORT) || 587,
      secure: false,
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    });

    await transporter.sendMail({
      from: `"Lucky Spin" <${process.env.SMTP_USER}>`,
      to: process.env.ADMIN_EMAIL,
      subject: `‚ö†Ô∏è Ph·∫ßn th∆∞·ªüng g·∫ßn h·∫øt: ${prizeName}`,
      html: `
        <h3>Th√¥ng b√°o s·ªë l∆∞·ª£ng qu√† t·∫∑ng g·∫ßn h·∫øt</h3>
        <p>Ph·∫ßn th∆∞·ªüng <b>${prizeName}</b> hi·ªán ch·ªâ c√≤n l·∫°i <b>${quantity}</b> ph·∫ßn.</p>
        <p>H√£y ki·ªÉm tra v√† b·ªï sung n·∫øu c·∫ßn.</p>
      `,
    });

    console.log(`üìß ƒê√£ g·ª≠i mail c·∫£nh b√°o qu√† ${prizeName} c√≤n ${quantity}`);
  } catch (err) {
    console.error("‚ùå L·ªói g·ª≠i mail:", err);
  }
}

// ===============================
// üéØ H√ÄM RANDOM THEO TR·ªåNG S·ªê
// ===============================
function pickPrizeByRatio(
  prizes: { id: number; name: string; ratio: number }[]
) {
  const total = prizes.reduce((sum, p) => sum + p.ratio, 0);
  const random = Math.random() * total;

  let cumulative = 0;
  for (const p of prizes) {
    cumulative += p.ratio;
    if (random <= cumulative) return p;
  }

  // fallback (hi·∫øm khi x·∫£y ra)
  return prizes[prizes.length - 1];
}

// ===============================
// üöÄ API QUAY TH∆Ø·ªûNG
// ===============================
export async function POST(req: Request) {
  try {
    const { phone, deviceKey, plateNumber } = await req.json();

    if (!phone) {
      return NextResponse.json(
        { success: false, message: "Thi·∫øu s·ªë ƒëi·ªán tho·∫°i" },
        { status: 400 }
      );
    }

    if (!plateNumber) {
      return NextResponse.json(
        { success: false, message: "Thi·∫øu bi·ªÉn s·ªë xe" },
        { status: 400 }
      );
    }

    // Chu·∫©n h√≥a d·ªØ li·ªáu ƒë·∫ßu v√†o
    const normalizedPlate = plateNumber.trim().toUpperCase();
    const encryptedPhone = encrypt(phone);

    // T√¨m user theo SƒêT ho·∫∑c bi·ªÉn s·ªë
    const user = await prisma.user.findFirst({
      where: {
        OR: [{ phone: encryptedPhone }, { licensePlate2: normalizedPlate }],
      },
      select: { id: true, name: true, phone: true, licensePlate2: true },
    });

    if (!user) {
      return NextResponse.json(
        { success: false, message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" },
        { status: 404 }
      );
    }

    // Gi·ªõi h·∫°n 1 l·∫ßn quay m·ªói ng√†y (VN timezone)
    const startOfDay = dayjs().tz("Asia/Ho_Chi_Minh").startOf("day").toDate();
    const endOfDay = dayjs().tz("Asia/Ho_Chi_Minh").endOf("day").toDate();

    const spunToday = await prisma.spinHistory.findFirst({
      where: {
        OR: [{ phone: encryptedPhone }, { plateNumber: normalizedPlate }],
        createdAt: { gte: startOfDay, lte: endOfDay },
      },
    });

    if (spunToday) {
      return NextResponse.json({
        success: true,
        prize: spunToday.prize,
        message:
          "S·ªë ƒëi·ªán tho·∫°i ho·∫∑c bi·ªÉn s·ªë xe n√†y ƒë√£ quay h√¥m nay, h√£y quay l·∫°i v√†o ng√†y mai!",
        alreadySpun: true,
      });
    }

    // L·∫•y danh s√°ch ph·∫ßn th∆∞·ªüng c√≤n h√†ng
    const prizes = await prisma.prizeConfig.findMany({
      where: { quantity: { gt: 0 } },
      orderBy: { id: "asc" },
    });

    if (!prizes.length) {
      return NextResponse.json(
        { success: false, message: "H·∫øt ph·∫ßn th∆∞·ªüng." },
        { status: 500 }
      );
    }

    // üéØ Ch·ªçn ph·∫ßn th∆∞·ªüng theo t·ªâ l·ªá
    const selected = pickPrizeByRatio(prizes);

    // üîí Transaction: gi·∫£m s·ªë l∆∞·ª£ng & ghi l·ªãch s·ª≠
    const updatedPrize = await prisma.$transaction(
      async (tx) => {
        const prize = await tx.prizeConfig.findUnique({
          where: { id: selected.id },
        });
        if (!prize || prize.quantity <= 0)
          throw new Error("Ph·∫ßn th∆∞·ªüng ƒë√£ h·∫øt");

        const updated = await tx.prizeConfig.update({
          where: { id: selected.id },
          data: { quantity: { decrement: 1 } },
        });

        // G·ª≠i mail n·∫øu qu√† g·∫ßn h·∫øt
        // if (updated.quantity < 3) await sendLowStockMail(updated.name, updated.quantity);

        // Ghi l·∫°i l·ªãch s·ª≠ quay
        const ip =
          req.headers.get("x-forwarded-for") ||
          req.headers.get("x-real-ip") ||
          "";
        const userAgent = req.headers.get("user-agent") || "";

        await tx.spinHistory.create({
          data: {
            phone: encryptedPhone,
            prize: updated.name,
            ip: String(ip),
            userAgent,
            plateNumber: normalizedPlate,
            ...(deviceKey ? { deviceKey } : {}),
          },
        });

        return updated;
      },
      {
        timeout: 15000, // tƒÉng l√™n 15 gi√¢y
      }
    );

    return NextResponse.json({
      success: true,
      prize: updatedPrize.name,
      prizeId: updatedPrize.id,
      message: "üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ quay th√†nh c√¥ng!",
    });
  } catch (error: any) {
    console.error("üî• L·ªói khi x·ª≠ l√Ω quay th∆∞·ªüng:", error);
    return NextResponse.json(
      { success: false, message: error.message || "L·ªói m√°y ch·ªß" },
      { status: 500 }
    );
  }
}
